(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{425:function(n,t,e){"use strict";e.r(t);var o=e(2),a=Object(o.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("// 简单动画函数封装\nfunction animate(obj, target, callback) {\n  //通过属性赋值的方法，实现给不同元素指定不同的定时器，优化var开辟新空间\n  clearInterval(obj.timer) //先清除定时器，避免重复叠加\n  obj.timer = setInterval(function (){\n    //步长值,涉及到除法，可能除不断，到不了目标位置比如500，实际494.6，将step取整\n    // 正值往上取整，倒退应该往下取整 Math.floor\n    var step = (target - obj.offsetLeft) / 10;\n    step = step > 0? Math.ceil(step) : Math.floor(step);\n    if (obj.offsetLeft == target) {\n      clearInterval(obj.timer)\n      // if (callback) {\n      //   callback();\n      // }\n      //可以改写为\n      callback && callback();\n    }\n    obj.style.left = obj.offsetLeft + step + 'px'\n  },15);\n}\n\n节流\n     // 节流： 在单位时间内，触发了多次函数，只有一个生效\n        const throttle = function(fn,delay){\n            let timer\n            return function(){\n                if(timer){\n                    return\n                }\n                // apply(this,参数数组)改变this\n                let _this = this\n                let _arg = arguments\n                timer = setTimeout(()=>{\n                    fn.apply(_this,_arg)\n                    timer = null\n                },delay)\n            }\n            \n        }\n        const handleSend = function(){\n            console.log('send',this);\n        }\n        let btn = document.getElementById('btn')\n        // btn.addEventListener('click', handleSend)\n        btn.addEventListener('click', throttle(handleSend,1000))\n\n防抖\n // 防抖：在事件被触发n秒后再执行回调，如果期间又被触发，则重新计时\n\t\t-应用模糊查询，滚动条\n        // 1. 触发事件  2.setTimeout 3. clearTimeout 4. this\n        const {log} = console\n        const handleSend = function(){\n            // 想要的是延迟搜索：输入完毕后再搜索\n            console.log('Search',this);\n            // 防抖后this指向window需改\n        }\n        //防抖 接收两个参数：1.事件函数 2.延迟\n        const debounce = (fn,delay)=>{\n            let timer //注意放外面，不然依然会log多次\n            return function() {\n                // 修改ths\n                let _this = this\n                timer && clearInterval(timer)\n                timer = setTimeout(()=>{\n                    // fn()\n                    // 1.利用call方法改变this指向 call(this,name,price,…多个参数)\n                    fn.call(_this)\n                },delay)\n            }\n        }\n        let btn = document.getElementById('debounce')\n        // btn.addEventListener('keyup',handleSend )\n        btn.addEventListener('keyup',debounce(handleSend,1000) )\n\n深克隆\n   // 数据拷贝\n        let arr = [1,3,NaN,{\n            name: 'tom',\n            age: undefined,\n            fn: ()=>{}\n        }]\n        console.log('原素组',arr);\n        console.log('JSON克隆',JSON.parse(JSON.stringify(arr))); //nan会变成null, 对象中value为undefined会被删除\n        function checkType(target){\n            //Array\n            return Object.prototype.toString.call(target).slice(8,-1)\n        }\n        function deepClone(data){\n            let type = checkType(data)\n            let obj \n            if (type === 'Array'){\n                obj = []\n                for(let i = 0; i < data.length; i++){\n                    obj.push(deepClone(data[i]))\n                }\n            }else if(type === 'Object'){\n                obj = {}\n                for (const key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        obj[key] = deepClone(data[key])\n                    }\n                }\n            }else{\n                return data\n            }\n            return obj\n        }\n        console.log(deepClone(arr));\n\nURL的参数解析为对象\n  const url = 'https://www.baidu.com/?tn=%E6%88%91&id=123'\n        const parseUrl = (url)=>{\n            const [,searchStr] = url.split('?')  //['https://www.baidu.com/', 'tn=%E6%88%91&id=123']\n            // console.log( searchStr.split('&')   );//['tn=%E6%88%91', 'id=123']\n            let obj = {}\n            for (const str of searchStr.split('&')) {\n                // console.log(str); //tn=%E6%88%91 id=123\n                // console.log(str.split('=')); //['tn', '%E6%88%91'] ['id', '123']\n                const [name,value] = str.split('=')\n                // console.log(name,value); tn %E6%88%91 id 123\n                obj[name] = decodeURIComponent(value) //有可能是汉字，这个方法转义\n            }\n            console.log(obj);\n            return obj\n        }\n        parseUrl(url)\n\n字符串是否为json\n  const isJSON = (str)=>{\n            try {\n                let obj = JSON.parse(str)\n                if(obj && Object.prototype.toString.call(obj) === '[object Object]'){\n                    return true\n                }else{\n                    return false\n                }\n            } catch (error) {\n                return false\n            }\n        }\n        const str1 = '{\"name\" :\"123\"}'\n        console.log(isJSON(str1) && JSON.parse(str1)); // true 代码健壮\n\n//将时间戳转为年月日形式\nfunction _addZero(value) {\n  return value < 10 ? \"0\" + value : value;\n}\nfunction formatDateTime (timeStamp) {\n  const date = new Date(timeStamp);\n  const y = date.getFullYear(),\n        m = _addZero(date.getMonth() + 1),\n        d = _addZero(date.getDate()),\n        h = _addZero(date.getHours()),\n        i = _addZero(date.getMinutes()),\n        s = _addZero(date.getSeconds());\n  \n  return `${y}年${m}月${d}日 ${h}:${i}:${s}`;\n}\nexport {\n  formatDateTime\n}\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);