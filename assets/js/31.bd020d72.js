(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{434:function(n,r,t){"use strict";t.r(r);var e=t(2),a=Object(e.a)({},(function(){var n=this,r=n._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h2",{attrs:{id:"函数的声明方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数的声明方式"}},[n._v("#")]),n._v(" 函数的声明方式")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("1.\t利用函数关键字自定义函数（命名函数）\nfunction 函数名(){}\n2.\t函数表达式（匿名函数）\nvar 变量名 = function(){}\n")])])]),r("h2",{attrs:{id:"js引擎运行js-预解析和代码执行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js引擎运行js-预解析和代码执行"}},[n._v("#")]),n._v(" JS引擎运行JS：预解析和代码执行")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("预解析:\t会把var和function提升到当前作用域的最前面\n\t变量预解析（变量提升）\n\t\t只提升变量声明不提升赋值\n\t函数预解析（函数提升）\n\t\n代码执行：\n\t按照代码书写顺序从上向下执行\n\n    //问1\n    console.log(num) // num is not defined 报错\n    //问2\n    console.log(num) // undefined\n    var num = 10;\n\t相当于\n\tvar num\n\tconsole.log(num)// undefined\n\tnum = 10\n\n    //问3\n    fn() //为什么能调用\n    function fn(){\n      console.log(11)\n    }\n\t相当于\n\tfunction fn(){}\n\tfn()\n\n    //问4\n    fun() //fun is not a function 报错\n    var fun = function(){\n      console.log(22)\n    }\n\t相当于\n\tvar fun\n\tfun() //fun is not a function 报错\n\tfun = function(){}\n案例！\n\tvar num = 10\n    \tfunction fun(){\n      \tconsole.log(num) //undefined\n     \t var num = 20\n   \t }\n    \tfun()\n\t\t//相当于\n\tvar num\n        function fun(){\n        var num\n        console.log(num) //undefined\n        num = 20\n        }\n        num = 10\n        fun()\n")])])]),r("h2",{attrs:{id:"封装的函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#封装的函数"}},[n._v("#")]),n._v(" 封装的函数")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("//新建一个数组，存入1-100的整数\n    var arr = []\n    for (i = 0; i < 100; i++){\n      arr[i] = i + 1;\n    }\n    console.log(arr)\n\n    //取出大于等于10的数，并组成新的数组\n    var arr = [22,3,3,333,3,3,33,3,33,1,1,1,1,1,1,1,1,1,111]\n    var newArr =[]\n    var j = 0\n    for (i = 0; i < arr.length; i++){\n      if (arr[i] >= 10){\n        newArr[j] = arr[i]\n        j++\n      }\n    }\n    console.log(newArr)\n\n或者 newArr.length 默认0\n    var arr = [22,3,3,333,3,3,33,3,33,1,1,1,1,1,1,1,1,1,111]\n    var newArr =[]\n    for (i = 0; i < arr.length; i++){\n      if (arr[i] >= 10){\n        newArr[newArr.length] = arr[i]\n\t//newArr.push(arr[i])\n      }\n    }\n    console.log(newArr)\n\n// 返回当前日期和星期\n    var date = new Date()\n    var year = date.getFullYear()\n    var month = date.getMonth() + 1 //返回当月(0-11)\n    var dates = date.getDate()\n    var arr = ['星期日','星期一','星期二','星期三','星期四','星期五','星期六']\n    var day = date.getDay() //返回0-6  表星期\n    console.log('今天是：' + year + '年' + month + '月' + dates + '日 ' + arr[day])\n\n//封装到函数，返回当前的时分秒，格式 08:07:08\n    function getTimer(){\n      var time = new Date()\n      //0-10秒返回 0-10\n      var hour = time.getHours()\n      hour = hour < 10 ? '0' + hour : hour\n      var mi = time.getMinutes()\n      mi = mi < 10 ? '0' + mi : mi\n      var sec = time.getSeconds()\n      sec = sec < 10 ? '0' + sec : sec\n      return hour + ':' + mi + ':' + sec\n    }\n    console.log(getTimer())\n\n倒计时函数\n\tfunction countDown(time){\n      var nowTime = +new Date()\n      var inputTime = +new Date(time)\n      var times = (inputTime - nowTime) / 1000\n      var d = parseInt(times / 3600 / 24)\n      d = d < 10? '0' + d : d\n      var h = parseInt(times / 3600 % 24)\n      h = h < 10? '0' + h : h\n      var m = parseInt(times / 60 % 60)\n      m = m < 10? '0' + m : m\n      var s = parseInt(times % 60)\n      s = s < 10? '0' + s : s\n      return d + '天' + h + '时' + m + '分' + s + '秒'\n    }\n    console.log(countDown('2021-5-21 18:00:00'))\n\n\t//求任意个数的最大值\n    function getMax(){\n      // arguments是伪数组，存储所有的实参;只有函数有 arguments\n      var max = arguments[0]\n      for (var i = 0; i < arguments.length; i++){\n        max = max > arguments[i]? max:arguments[i]\n      }\n      // return的意思：函数名() = return后的内容 将return后的数据赋值给这个函数\n      return max\n    }\n    console.log(getMax(11,23,5))\n    console.log(getMax(11,23,5,155))\n\n\t//翻转数据\n    var arr = [22,33,1,111]\n    function reverse(arr){\n      var newArr = []\n      for(i = arr.length - 1; i >= 0; i--){\n        newArr[newArr.length] = arr[i]\n      }\n      return newArr\n    }\n    console.log(reverse(arr))\n\n\t//冒泡排序，将一系列数据按一定顺序排列（小到大或大到小）\n        //从小到大排列\n    var arr1 = [1,4,5,2,3]\n    function sort(arr) {\n      for (i = 0; i < arr.length - 1; i++) {\n        for (j = 0; j < arr.length - 1 - i; j++) {\n          if (arr[j] > arr[j + 1]) {\n            var temp = arr[j]\n            arr[j] = arr[j + 1]\n            arr[j + 1] = temp\n          }\n        }\n      }\n      return arr\n    }\n    // return的意思：函数名() = return后的内容 将return后的数据赋值给这个函数\n    var result = sort(arr1)\n    console.log(result)\n\n\t//判断闰年\n    function isRun(year) {\n      var flag = false\n      if (year % 4 == 0 & year % 100 != 0 || year % 400 == 0){\n        flag = true\n      }\n      return flag\n    }\n    var result = isRun(2008)\n    console.log(result)\n\n\n\t//查找字符串中所有c出现的位置和次数\n    var str = 'abcacc'\n    var index = str.indexOf('c')\n    var count = 0\n    for (var i = 0; i < str.length; i++){\n      if (index != -1){\n        console.log(index)\n        index = str.indexOf('c', index + 1)\n        count += 1\n      }\n    }\n    console.log(count)\t\n\n\t//判断一个字符串中出现次数最多的字符，并统计次数\n    //算法：1.charAt遍历 2.将字符存给一个对象 3.判断对象是否有该属性，没有为1，有则+1 4.遍历新对象，获取最大值\n    var str = 'abcddeeffggg'\n    var obj = {}\n    for (var i = 0; i < str.length; i++) {\n        var chars = str.charAt(i)\n        if (obj[chars]){\n          obj[chars]++\n        }else{\n          obj[chars] = 1\n        }\n    }\n    var max = 0\n    var ch = ''\n    for (var k in obj){\n      if (obj[k] > max){\n        max = obj[k]\n        ch = k\n      }\n    }\n    console.log('出现最多为'+ch+'次数为：'+max)\n")])])])])}),[],!1,null,null,null);r.default=a.exports}}]);