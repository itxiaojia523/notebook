(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{465:function(t,e,n){"use strict";n.r(e);var r=n(2),o=Object(r.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"redux-toolkit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redux-toolkit"}},[this._v("#")]),this._v(" Redux Toolkit")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("1. store.js\n创建一个空的Redux store，同时自动配置 Redux DevTools 扩展，以便检查存储：\nimport { configureStore } from '@reduxjs/toolkit'; \nimport counterReducer from '../features/counter/counterSlice'; \nexport default configureStore({ \n\treducer: { counter: counterReducer, 后面多个reducer}, \n});\n\n2.< provider >包裹APP\nindex.js 文件\n\nimport React from 'react'; \nimport ReactDOM from 'react-dom'; \nimport { Provider } from 'react-redux'; \nimport './index.css'; \nimport App from './App'; \nimport store from './app/store'; \nReactDOM.render( <Provider store={store}> <App /> </Provider>, document.getElementById('root') );\n\n3.slice文件\n可以导出生成的 Redux 动作创建器（action creators）和整个片的 reducer 函数\n\nimport { createSlice } from '@reduxjs/toolkit' \nconst initialState = { value: 0, } \nexport const counterSlice = createSlice({ \n\tname: 'counter', \n\tinitialState, \n\treducers: {\n\t\t//针对这个状态的多个reducer \n\t\tincrement: (state) => { \n\t\t/** * Redux Toolkit 允许我们在还原器中编写“可变的（mutable）”逻辑。 * 它实际上并没有改变状态，因为它使用 Immer 库, * 它将检测对\"draft state\" 的更改，并根据这些更改生成 * 一个全新的不可变状态 */ \n\t\tstate.value += 1 }, \n\t\tdecrement: (state) => { state.value -= 1 }, \n\t\tincrementByAmount: (state, action) => { state.value += action.payload }, }, \n        \n}) \n// 为每个 reducer 函数生成动作创建器（Action creators） \nexport const { increment, decrement, incrementByAmount } =counterSlice.actions \n\nexport const incrementAsync = amount => dispatch => { setTimeout(() => { dispatch(incrementByAmount(amount)); }, 1000); }; \nexport const selectCount = state => state.counter.value; \nexport default counterSlice.reducer\n\n4. 使用\nimport { decrement, increment, incrementByAmount, incrementAsync, selectCount, } from './counterSlice'; \nimport { useSelector, useDispatch } from 'react-redux'; \n\nconst count = useSelector(selectCount); \nconst count = useSelector((state) => state.counter.value) //没有暴露selectCount就这么写\n\n\n")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);