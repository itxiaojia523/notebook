(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{466:function(t,e,s){"use strict";s.r(e);var n=s(2),a=Object(n.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"容器-代码-数据-分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器-代码-数据-分离"}},[this._v("#")]),this._v(" 容器 代码 数据 分离")]),this._v(" "),t("h2",{attrs:{id:"简单使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单使用"}},[this._v("#")]),this._v(" 简单使用")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<div id=\"test\"></div> //容器\n\n<script type=\"text/babel\">\n\t//1.创建虚拟dom\n    //区分真实dom和虚拟dom\n\tconst VDOM = <h1>Hello,React</h1>  //注意不是字符串 jsx目的就是为了简化创建虚拟dom\n\tconst VDOM2 = <h1>Hello,React</h1>\n\t//2.渲染DOM到页面\n\tReactDOM.render(VDOM,document.getElementByID('test'))\n\tReactDOM.render(VDOM2,document.getElementByID('test')) //注意：render是替换的动作，不是追加\n<\/script>\n\n关于虚拟DOM\n    1.本质是一个Object 一般对象\n    2.虚拟dom比较轻量，真实dom比较重\n    因为虚拟dom是react内部使用，无需真实dom上那么多的属性\n    3.虚拟dom最终会被react转为真实dom,呈现到页面\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);