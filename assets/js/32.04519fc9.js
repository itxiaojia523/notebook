(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{436:function(n,t,a){"use strict";a.r(t);var e=a(2),s=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"创建对象的三种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的三种方式"}},[n._v("#")]),n._v(" 创建对象的三种方式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\t1.字面量\n  var obj = {name: '三毛'}\n\t2.new Object\n\tvar obj = new Object()\n\tobj.name = name\n  以上两种一次只能创建一个对象\n\t3.构造函数：\n  将对象中相同得属性和方法抽象出来，封装到函数中\t\n    //1.申明构造函数\n    function 构造函数名(){\n      this.属性 = 值\n      this.方法 = function (){}\n    }\n    //2.调用构造函数\n    new 构造函数名()\n")])])]),t("h2",{attrs:{id:"调用对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用对象"}},[n._v("#")]),n._v(" 调用对象")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("1.对象名.属性名\n2.对象名['属性名']\n")])])]),t("h2",{attrs:{id:"new关键字执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new关键字执行过程"}},[n._v("#")]),n._v(" new关键字执行过程")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1.创建一个空的对象\n2.this指向\n3.执行代码，添加属性和方法\n4.返回这个对象\n")])])]),t("h2",{attrs:{id:"遍历对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历对象"}},[n._v("#")]),n._v(" 遍历对象")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("      for(var k in obj){ //一般写k或者jk\n      console.log(k)//得到属性名\n      console.log(obj[k])//得到属性值\n    }\n")])])]),t("h2",{attrs:{id:"对象分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象分类"}},[n._v("#")]),n._v(" 对象分类")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\t1.自定义对象\n\t2.内置对象：JS语言自带的一些对象\n\t\t以上两个属于ECMAScript\n\t3.浏览器对象（JS独有）\n\n  3.1Math对象\n\tMath.max() //返回-Infinity 什么不写\n\tMath.PI\n\tMath.abs() //绝对值\n\tMath.floor()//向下取整\n\tMath.round()//四舍五入 \n  注意\tMath.round(-1.5) //-1\n\tMath.random() // 0 <= x < 1\n\n  //随机获取两个数之间的整数（含两端）\n    function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min; //含最大值，含最小值\n    }\n   //随机点名\n    var arr = ['毛','毛毛','毛毛毛']\n    console.log(arr[getRandomInt(0,arr.length - 1)])\n\n  3.2 日期对象:\n\tvar date = new Date() //返回当前时间 什么不写\n\t参数的常见写法 2021,5,19  //容易错，5月变6月\n\t或者是字符串 '2021-5-19 15:31:31' //常用\n  日期对象的方法\n\n  日期的总的毫秒形式：距离1970.1.1过了多少毫秒\n\tDate对象是基于1970年1月1日（世界标准时间）起的毫秒数\n\t1.var date = newDate()\n\t\tdate.valueOf() 或者 date.getTime()\n\t2.简单写法 最常用 \n\t\tvar date1 = +new Date()\n\t3.H5新增 \n\t\tconsole.log(Date.now())\n")])])]),t("h2",{attrs:{id:"对象创建模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象创建模型"}},[n._v("#")]),n._v(" 对象创建模型")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("方法1\tObject构造函数模式\n\t*先创建空obj,再添加属性\n\t*适用于不确定对象内部数据\n\t*问题：语句太多\n  ex.\n  var p = new Object()\n  p.name = 'Tome'\n  p.age = 'age'\n\n方法2\t对象字面量模式\n\t*一条语句\n\t*使用{} 同时指定属性\n\t*适用于内部数据确定\n\t*问题：如果需要创建多个，有重复代码\n\n  var p = {\n    name: 'Tome',\n    age:= 'age'\n  }\n\n方法3\t工厂模式\n\t*通过工厂函数（返回一个对象的函数）创建对象并返回\n\t*适用于创建多个对象\n\t*问题：对象没有一个具体的类型，都是Obj\n\n  function createP(name,age) {\n    var obj = {\n      name: name,\n      age: age,\n      setName: function (){\n        this.name = name\n      }\n    }\n    return obj\n  }\n  var p1 = createP('Tome',12)\n  var p2 = createP('Bob',13)\n  问题p1和p2都是obj\n\n  function createStudent(name,age,price) {\n    var obj = {\n      name: name,\n      age: age,\n      price:price\n      setName: function (){\n        this.name = name\n      }\n    }\n    return obj\n  }\n  var s1 = createStudent('Tim',12,12000)\n  问题s1也是obj\n\n  以上三个对象没有具体类型\n\n  方法4\t自定义构造函数模式\n\t*通过new创建对象\n\t*场景：需要创建多个类型确定的对象\n\t*问题：每个对象都有相同的数据（方法），浪费内存\n\t*将这个方法放到原型中！方法5 \n  //定义构造函数\n  function Person(name,age) {\n    this.name = name\n    this.age = age\n    this.setName = function (name){\n      this.name = name\n    }\n  }\n  //创建对象\n\tvar p1 = new Person('Bob',99)\n\tconsole.log(p1 instanceof Person)\n\n  //定义构造函数 学生\n  function Student(name,age) {\n    this.name = name\n    this.age = age\n    this.setName = function (name){\n      this.name = name\n    }\n  }\n\tvar s1 = new Student('Tim',22)\n\n  方法5\t构造函数+原型\n  function Person(name,age) { //只初始化一般属性\n    this.name = name\n    this.age = age\n  }\n\n  Person.prototype.setName = function(name){\n      this.name = name //this是实例\n  }\n\n\tvar p1 = new Person('Bob',99)\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);