(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{480:function(t,n,i){"use strict";i.r(n);var a=i(2),s=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"快速入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速入门"}},[t._v("#")]),t._v(" 快速入门")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('1. 下载和安装\n\n2. 配置用户信息：用户名和邮箱\ngit config —global user.name “itxiaojia”\ngit config —global user.email  “chenminxin51@gmail.com”\n\n远程仓库克隆到本地\ngit clone 地址\n\n3. 拉取最新代码\ngit pull\n\n4. 如果没有是新建项目 \ngit init\n\n5. 拉去完代码，切换分支\n#查看所有分区 标注*表当前所在分区\ngit branch\n\n#创建新分区\ngit branch 分支名\n\n#切换到指定分区\ngit checkout 分支\n\n#创建并切换 \ngit checkout -b 分支名\n\n#敲完代码后\ngit add. 一次性追踪所有文件，将文件加入暂存区\n\ngit commit -m "comment"\n\n6. 推送代码\ngit push\n\n本地仓库回滚:前提是没有提交给远程仓库\n\tgit log //查看提交过的版本号\n\tgit reflog -soft 版本号\n\t如果选hard就回到4.0版本，5.0代码不在\n\t如果选soft也回到4.0版本，但是修改的代码还在，只是还未提交的状态\n\n\n## 总结\n ##先配置ssh\n   1). 创建远程仓库\n    2). 创建本地仓库\n        a. 配置.gitignore\n        b. git init\n        c. git add .\n        d. git commit -m "init"\n    3). 将本地仓库推送到远程仓库\n        git remote add origin url\n        git push origin master\n    4). 在本地创建dev分支, 并推送到远程\n        git checkout -b dev\n        git push origin dev\n##在分支写功能\n    5). 如果本地有修改\n        git add .\n        git commit -m "xxx"\n        git push origin dev\n    6). 新的同事: 拉代码\n        git clone url\n\t远程有dev分支，其实拿到了，只是没有生成\n        git checkout -b dev origin/dev\n        git pull origin dev\n⚠️拉完代码npm I 下载依赖\n    7). 如果远程修改\n        git pull origin dev\n\n\t\n\n\n\n')])])]),n("h2",{attrs:{id:"分支合并"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分支合并"}},[t._v("#")]),t._v(" 分支合并")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("#合并分支\n1.切换到master分支\ngit checkout master\n2.合并\ngit merge login\n\n#删除分支 \n1.切换到主分支\ngit branch -d 分支 \n-D 大些表强制删除，不会提示\n##遇到冲突时的合并\n1.打开包含冲突的文件，手动解决冲突后 \n2.add 和 commit\n\n合并\n\t1. 本地合并 再推送远程（不推荐）\n\tGit checkout main 切到主分支\n\tGit merge login 合并 \n\tgit push\n\t\n\t2. 远程合并拉取到本地\n\t推送完dev后\n\t git发现dev更新\n\t 管理者解决冲突并合并\n")])])]),n("h1",{attrs:{id:"git的ssh配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git的ssh配置"}},[t._v("#")]),t._v(" Git的ssh配置")]),t._v(" "),n("p",[t._v("https://blog.csdn.net/weixin_50512542/article/details/125471724")]),t._v(" "),n("h2",{attrs:{id:"安装和配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装和配置"}},[t._v("#")]),t._v(" 安装和配置")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("https://git-scm.com/\n\n\n\n查看全局配置\ngit config —list —global #查看所有全局配置\n\ngit config user.name #查指定的配置\n\n##乌班图安装git\n\n$ apt install git   \t# git 安装\n$ git --version\t\t\t# 查看git版本\n\n# centOS安装git 用yum\n$ yum install git\n\n# 查看版本\n$ git --version\n\n# 创建仓库（2种方式）\n\t1. git init #在当前文件夹创建初始仓库\n\t2. git clone\n\n\nClear 清空终端\ngit指令手册\ngit help config #完整手册\ngit config -h #简洁\n")])])]),n("h2",{attrs:{id:"git操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git操作"}},[t._v("#")]),t._v(" git操作")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("工作区文件四种状态\n\t1. untracked 未追踪 #不被git管理 \n\t2. 未被git管理 1<—>2 git add 文件名或.\n\t3. 已被git管理 未修改 已修改 已暂存\n\n已精简方式检查文件状态\ngit status -s\n\n红色？？表未追踪\ngit add追踪后 变绿 已追踪并且暂存\ngit commit -m “备注” #提交到本地仓库\n\n红色M 表已修改 但未暂存 需要再次add 和 commit\n绿色M 表已暂存\n绿A 表新添到暂存区文件\n\n#从暂存区移除文件\ngit reset HEAD 文件名\n\n##⚠️ 撤销对文件的修改，还原成git仓库中保存的版本\ngit checkout —文件名\n\n全部commit后\ngit status确认 nothing to commit\n\n##移除文件\n\t1. 只从git仓库移除，保留工作区文件\ngit rm —cached 文件名\n\t2. git仓库和工作区同时移除\ngit rm -f 文件名\n")])])]),n("h2",{attrs:{id:"远程分支操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#远程分支操作"}},[t._v("#")]),t._v(" 远程分支操作")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("#第一次推送分支\ngit push -u 远程仓库别名 本地分支名：远程分支名\n-u表 关联本地和远程分支，只在初次使用，之后直接git push\n远程仓库名 默认origin\nex.\ngit pish -u origin payment:pay\n\n#查看远程分支\ngit remote show 远程仓库名称（origin）\n\n#跟踪分支：即下载远程分支保存本地和远程分支名称相同\ngit checkout 远程分支名\n\n#下载分支 并重命名\ngit checkout -b 本地分支名 远程仓库名:远程分支名\ngit checkout -b payment origin:pay\n\n\n\n#删除远程分支\ngit push 远程仓库名 —delete 远程分支名\n\n")])])]),n("h2",{attrs:{id:"配置仓库使用-ssh"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置仓库使用-ssh"}},[t._v("#")]),t._v(" 配置仓库使用-ssh")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\t1. cmd中输入以下命令，邮箱为注册github的邮箱 生成key\nssh-keygen -t rsa -b 4096 -C "chenminxin51@gmail.com"\n\n\t2. 配置key\n\t记事本打开 id_rsa_pub文件，复制内容\n\t打开github-setting-ssh key地方 添加\n\n\t3. 检测ssh key是否配置成功\n\tssh -T git@github.com\n\tyes\n看提示 \n')])])]),n("h2",{attrs:{id:"常用指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[t._v("#")]),t._v(" 常用指令")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("git init 初始化仓库\n\ngit status \n\n\n")])])]),n("h2",{attrs:{id:"gitignore"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gitignore"}},[t._v("#")]),t._v(" .gitignore")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("以#开头是注释\n以/结尾是目录\n以/开头防止递归\n以!开头表取反\n可以用glob模式进行文件和文件夹的匹配\n\nglob模式：简化了的正则\n*表匹配0个或多个任意字符\n[abc]匹配任意一个列在方括号里的字符\n?只匹配一个任意字符\n等等\n")])])]),n("h2",{attrs:{id:"git的基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git的基本概念"}},[t._v("#")]),t._v(" git的基本概念")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\t• 分布式版本控制系统-联网多人-性能优-体验好-git\n\t• 集中化版本控制系统-联网多人-性能差-体验差\n\t• 本地版本控制系统-单机允许，版本控制\n\ngit特性-高效快速\n\t1. 直接快照，而非差异比较\n近乎所有操作都是本地执行\n")])])]),n("h3",{attrs:{id:"svn-和-git"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#svn-和-git"}},[t._v("#")]),t._v(" SVN 和 Git")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("传统的版本控制系统如：SVN是基于差异的版本控制，它们存储的是一组基本文件和每个文件随时间逐步积累的差异\n\nversion1\tversion2\tversion3\tversion4\tversion5\nFileA->\t\tA1->\t\t\t\t\tA2\nFileB->\t\t\t\t\tB1->\t\t\t\t\tB2\n\n好处：节省磁盘\n坏处：耗时，效率低\n每次切换版本，都需要在基本文件FileA上应用每个差异，从而生成目标版本对应的文件\n\nGit的记录快照\n在原有文件版本的基础上，重新生成一份新的文件，类似于备份\n如果文件没有修改，Git不再重新存储该文件，而是只保留一个指针，指向之前存储的文件\n\nversion1\tversion2\tversion3\tversion4\tversion5\nFileA\t\tA1\t\t\tA1\t\t\tA2\t\t\tA2\nFileB\t\tB\t\t\tB\t\t\tB1\t\t\tB2\nFileC\t\tC1\t\t\tC2\t\t\tC2\t\t\tC3\n\n缺点：占用磁盘较大\n优点：版本切换速度快，因为每个版本都是完整的文件快照\n空间换事件\n\n三个区域\n• 工作区\n• 暂存区-待提交\n• git仓库\n \n三个状态\n• modified 已修改\n• staged 已暂存\ncommitted 已提交\n\n\t1. 架构师已经把框架搭建起来了  放在远程仓库\n\t2. USER1 把远程仓库代码拉取过来\ngit clone url\n\t远程有dev分支，其实拿到了，只是没有生成\n        git checkout -b dev origin/dev\n        git pull origin dev\n\n微服务系统要克隆哪些项目：①克隆项目需要权限 需要负责人打开权限 ② 自己负责的微服务 和 网关服务 需要查看其它服务的代码的时候，申请权限\n\n\n\t出现合并冲突：\n\t如何解决：不应该直接push 而是先拉取最新代码 再修改代码 再push\n\t\n\t 只要改的不是同一个文件，冲突了以后可以直接pull 再push 两边都会在\n\t\n\t如果改的是同一个文件可以都是controller1\n\t\n就会出现合并冲突\n\n\t解决完冲突 后 要手动提交一次本地仓库\n\t再push一次\n\t\n\t如何避免修改了一个controller了呢\n\t可以将controller拆分\n\t\n\n\t\n远程仓库回滚\n\tv8 已经提交到了远程仓库\n\t①本地先回滚到v7\n\t②git push origin 分支名 -f\n\t\n\t注意：如果user2代码是v8的代码 如何处理\n\t所以要确保：这个期间别人没有更新你的代码\n\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);