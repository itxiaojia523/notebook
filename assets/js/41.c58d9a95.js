(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{443:function(n,e,t){"use strict";t.r(e);var s=t(2),r=Object(s.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("无论是vue-cli,还是react-create-app他们都是基于webpack二次封装的脚手架")]),n._v(" "),e("p",[n._v("rollup类似webpack 打包成不同模式的js")]),n._v(" "),e("h2",{attrs:{id:"下载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#下载"}},[n._v("#")]),n._v(" 下载")]),n._v(" "),e("p",[n._v("npm i rollup\nnpm i rollup -g 全局安装")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 将index.js打包输出成bundle.iife文件，iife模式\nnpx rollup index.js --file bundle-iife.js --format iife\n\n// 将index.js打包输出成cjs模式\nnpx rollup index.js --file bundle-cjs.js --format cjs\n\n// 将index.js打包输出成umd模式\nnpx rollup index.js --file bundle-umd.js --format umd\n// es\nnpx rollup index.js --file bundle-es.js --format es\n\nes打包后的代码是这样的,不过此时es6还未为编译成es5\n")])])]),e("h2",{attrs:{id:"配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[n._v("#")]),n._v(" 配置文件")]),n._v(" "),e("p",[n._v("rollup.config.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\nexport default {\n    input: 'index.js', // 入口文件\n    output: {\n        format: 'cjs', // cjs\n        file: 'bundle.js' // 打包输出后文件名\n    },\n}\n\nWarning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\n\n当我们指定配置文件时,package.json的 type要指定成module,当node版本大大于13时，默认是以ES Module方式\n要么在package.json文件中加入type: module，\n要么把配置文件的后缀名改成rollup.config.mjs\n")])])]),e("h2",{attrs:{id:"es6转es5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6转es5"}},[n._v("#")]),n._v(" es6转es5")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('es6转es5主要依赖以下几个关键插件，\nrollup-plugin-babel,\n@babel/preset-env,\n@babel/core\n\n在根目录下新建一个.babelrc.json，并依次安装\nnpm i rollup-plugin-babel @babel/preset-env @babel/core --save-dev\n\n.babelrc.json\n{\n    "presets": [\n        ["@babel/env", {"modules": false}]\n    ]\n}\n')])])]),e("p",[n._v("rollup.config.js ---\x3e")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import commonjs from '@rollup/plugin-commonjs';  //主要是编译cjs\nimport babel from 'rollup-plugin-babel';\nexport default [\n    {\n        input: 'index.js',\n        output: {\n            format: 'cjs',\n            file: 'bundle_cjs.js'\n        },\n        plugins: [commonjs(), babel({\n            exclude: ['node_modules/**']\n        })]\n    },\n]\n\nrollup默认就是esModule方式，所以你会看到你配置的输出文件都是export default方式输出的\n")])])]),e("h3",{attrs:{id:"ts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ts"}},[n._v("#")]),n._v(" ts")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('这里注意一点lib配置需要加上dom.iterable，不加这个会打包编译报错，因为我们的工具函数里有用到entries迭代器，\n默认生成的配置会比较多，关键的几个，特别注意lib,target,jsx即可\n\ntsconfig\n{\n    "compilerOptions": {\n      "baseUrl": ".",\n      "outDir": "dist",\n      "sourceMap": true,\n      "target": "es5",\n      "module": "ESNext",\n      "moduleResolution": "node",\n      "newLine": "LF",\n      "strict": true,\n      "allowJs": true,\n      "noImplicitAny": false,\n      "noImplicitThis": false,\n      "noUnusedLocals": true,\n      "experimentalDecorators": true,\n      "resolveJsonModule": true,\n      "esModuleInterop": true,\n      "removeComments": false,\n      "jsx": "preserve",\n      "lib": ["esnext", "dom", "dom.iterable"],\n    },\n  }\n\nrollup.config.js\n\nimport path, { dirname } from \'path\';\nimport { fileURLToPath } from \'url\'\nimport commonjs from \'@rollup/plugin-commonjs\';\nimport babel from \'rollup-plugin-babel\';\nimport alias from \'@rollup/plugin-alias\';\nimport ts from \'rollup-plugin-typescript2\';\n\nconst resolve = (p) => {\n    return path.resolve(dirname(fileURLToPath(import.meta.url)), p)\n};\nconst builds = {\n    \'runtime-cjs-prod\': {\n        entry: resolve(\'src/index.ts\'),\n        dest: name => `dist/${name}.js`,\n        format: \'cjs\',\n        env: \'production\',\n        external: []\n    },\n    \'runtime-esm-prd\': {\n        entry: resolve(\'src/index.ts\'),\n        dest: name => `dist/${name}.js`,\n        format: \'esm\',\n        env: \'production\',\n        external: []\n    },\n    \'runtime-umd-prd\': {\n        entry: resolve(\'src/index.ts\'),\n        dest: name => `dist/${name}.js`,\n        format: \'umd\',\n        env: \'production\',\n        external: []\n    }\n}\nconst getConfig = (name) => {\n    const opts = builds[name];\n    const config = {\n        input: opts.entry,\n        external: opts.external,\n        plugins: [\n            commonjs(),\n            babel(),\n            // 设置全局路径别名\n            alias({\n                entries: {\n                    \'src\': resolve(\'src\'),\n                }\n            }),\n            ts({\n                tsconfig: resolve(\'./tsconfig.json\')\n            })\n        ].concat(opts.plugins, []),\n        output: {\n            file: opts.dest(name),\n            format: opts.format,\n            name: opts.name || \'Nice_utils\',\n        }\n    }\n    return config;\n}\n\nexport default Object.keys(builds).map(getConfig)\n\n我们注意到resolve这个方法有些特殊，主要是获取路径，我们以前可能不会这么做，我们会path.resove(__dirname, p),因为此时rollup是默认ESModule所以，__dirname就会报错,__dirname只有在cjs中才可以正确使用，所以这里只是换了一种方式，但实际上的作用并没有发生变化\n\npackage.json\n{\n    "name": "02",\n    "version": "1.0.0",\n    "description": "",\n    "main": "index.js",\n    "type": "module",\n    "scripts": {\n        "test": "echo \\"Error: no test specified\\" && exit 1",\n        "build": "rollup -c rollup.config.js"\n    },\n    "keywords": [],\n    "author": "",\n    "license": "ISC",\n    "devDependencies": {\n        "@babel/core": "^7.19.6",\n        "@babel/preset-env": "^7.19.4",\n        "@rollup/plugin-alias": "^4.0.2",\n        "@rollup/plugin-commonjs": "^23.0.2",\n        "@types/node": "^18.11.6",\n        "rollup": "^3.2.3",\n        "rollup-plugin-babel": "^4.4.0",\n        "rollup-plugin-typescript2": "^0.34.1",\n        "typescript": "^4.8.4"\n    }\n}\n\n注意@types/node必须要安装，不安装就会提示需要安装此插件\n并且我们看到了es6转es5所需要的@babel/core,@babel/preset-env以及rollup-plugin-babel，还有@rollup/plugin-commonjs,这个插件会将内部模块中如果有用到cjs会给我们转译成es6，因为在浏览器是不识别require这样的关键字的\n')])])]),e("h2",{attrs:{id:"测试打包后的js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试打包后的js"}},[n._v("#")]),n._v(" 测试打包后的js")]),n._v(" "),e("p",[n._v("example文件，在该目录下新建一个index.html")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>example</title>\n  </head>\n  <body>\n    <div id="app"></div>\n    <script src="../dist/runtime-umd-prd.js"><\/script>\n  </body>\n</html>\n')])])]),e("p",[n._v("需要借助一个类似webpack-dev-server的第三方插件才行，这里我们结合gulp与browser-sync两个插件")]),n._v(" "),e("p",[n._v("gulpfile.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// gulpfile.js\nimport browserSync from 'browser-sync';\nimport gulp from 'gulp';\nimport { rollup } from 'rollup';\nimport { builds, getConfig } from './config.js';\n\nconst buildTask = (keyName) => {\n    gulp.task('build', () => {\n        const { input, output, plugins } = getConfig(keyName);\n        return rollup({\n            input,\n            plugins\n        })\n            .then(bundle => {\n                return bundle.write({\n                    ...output,\n                    sourcemap: true\n                });\n            });\n    });\n}\nconst devServer = () => {\n    const server = browserSync.create();\n    const defaultOption = {\n        port: '8081', //设置端口\n        open: true,  // 自动打开浏览器\n        files: `src/*`, // 当dist文件下有改动时，会自动刷新页面\n        server: {\n            baseDir: '.' // 基于当前根目录\n        },\n        serveStatic: ['.', './example'],\n    }\n    gulp.task('server', () => {\n        server.init(defaultOption)\n    })\n}\nconst start = async () => {\n    const keyName = Object.keys(builds)[2]; // 输出umd模式\n    await buildTask(keyName);\n    await devServer();\n}\nstart();\n\n\n")])])]),e("p",[n._v("config.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// config.js\nimport path, { dirname } from 'path';\nimport { fileURLToPath } from 'url'\nimport commonjs from '@rollup/plugin-commonjs';\nimport babel from 'rollup-plugin-babel';\nimport alias from '@rollup/plugin-alias';\nimport ts from 'rollup-plugin-typescript2';\nexport const resolve = (p) => {\n    return path.resolve(dirname(fileURLToPath(import.meta.url)), p)\n};\nexport const builds = {\n    'runtime-cjs-prod': {\n        entry: resolve('src/index.ts'),\n        dest: name => `dist/${name}.js`,\n        format: 'cjs',\n        env: 'production',\n        external: [],\n        plugins: []\n    },\n    'runtime-esm-prd': {\n        entry: resolve('src/index.ts'),\n        dest: name => `dist/${name}.js`,\n        format: 'esm',\n        env: 'production',\n        external: [],\n        plugins: []\n    },\n    'runtime-umd-prd': {\n        entry: resolve('src/index.ts'),\n        dest: name => `dist/${name}.js`,\n        format: 'umd',\n        env: 'production',\n        external: [],\n        plugins: []\n    }\n}\nexport const getConfig = (name) => {\n    const opts = builds[name];\n    const config = {\n        input: opts.entry,\n        external: opts.external,\n        plugins: [\n            commonjs(),\n            babel(),\n            // 设置全局路径别名\n            alias({\n                entries: {\n                    'src': resolve('src'),\n                }\n            }),\n            ts({\n                tsconfig: resolve('./tsconfig.json')\n            })\n        ].concat(opts.plugins, []),\n        output: {\n            file: opts.dest(name),\n            format: opts.format,\n            name: opts.name || 'Nice_utils',\n        }\n    }\n    return config;\n}\n\n\n")])])]),e("p",[n._v("package.json")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('"scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "build": "rollup -c rollup.config.js",\n    "server": "gulp build && gulp server"\n},\n\n')])])]),e("p",[n._v("注意我们server实际上有两个任务，所以必须要依次执行两个任务才行")]),n._v(" "),e("p",[n._v("当我们运行npm run server时，就会打包，并同时打开浏览器")])])}),[],!1,null,null,null);e.default=r.exports}}]);