(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{438:function(n,t,e){"use strict";e.r(t);var a=e(2),l=Object(a.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("数据类型\n1.分类\n\t-基本/值类型\n\t\tString：任意字符串\n\t\tNumber：任意数字\n\t\tBoolean：true/false\n\t\tUndefined：undefined\n\t\tNull：null\n\t-对象/引用类型\n\t\tObject:\t任意对象\n\t\tFunction： 可以执行的对象\n\t\tArray：\t有序的对象\t\n2.如何判断\n\t===\n\t\t判断undefined和null\n\n\ttypeof//返回的是字符串，注意小写\n\t\t可以判断undefined/数值/字符串/布尔值/函数\n\t\t！不能判断null和object array和object \n\n\tvar a\n\tconsole.log(a,typeof a); // undefined,\"undefined\"\n\n\tinstanceof //专用判断对象的具体类型，函数/数组\n\tinstance/实例\nex.\n\tvar b1 = {}\n\tconsole.log(b1 instanceof Object) //b1是否是Object的实例\n\t类型是通过构造函数表达\n\tObject是一个构造函数 b1是Object的实例\n\n什么是实例\n实例和类型\n\t实例是实例对象\n\t类型是类型对象\nfunction Person(name,age){ //设置（P）构造函数，即类型\n\tthis.name = name\n\tthis.age = age\n}\nvar p = new Person('tom',12) //根据类型创建的实例对象，在new时，才知道是构造函数\n\n相关问题\n1.undefined与null的区别\n\tundefined:定义了未赋值\n\tnull：定义了并赋值，值为null\n2.什么时候给变量赋值null\n\tvar b = null //初始赋值为null 表将赋值为对象\n\tb = ['maomao',12]\n\tb = null //最后赋值为Null 表回收垃圾对象\n\tb = 2\t//用2代替Null,产生了新的垃圾数据\n\t\n3.严格区分变量类型和数据类型\n\t数据类型\n\t\t-基本类型\n\t\t-对象类型\n\t变量类型（变量内存值的类型）//js是弱类型语言\n\t\t-基本类型：保存基本类型数据\n\t\t-引用类型：保存地址值\n\tvar c = {} // c里存的是对象的地址，c本身不是对象\n\n数据 变量 内存\n1.什么是数据\n\t存储在内存中代表特定信息的01\n2.什么是内存\n\t内存条通电后产生的可存储的数据空间（临时的）\n\t一块小内存的2个数据，一个是内部数据，一个是自身的地址数据，对象内存才会用到地址值\n\t\n\t内存分类\n\t堆：全局/局部变量\n\t栈：对象\n3.什么是变量\n\t可变化的量，变量名+变量值\n\t每个变量都对应一个小内存，变量名用来查找对应的内容，是一个标识\n\t变量值是内存中保存的数据\n\tobj.name 能.表面存的是地址\n\tname:'Tom'  ：左边是标识，右边是值；name是对象内的数据，在堆\nvar a = obj 用的是内部数据，直接将b的数据直接复制一份给a\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);