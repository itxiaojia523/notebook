(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{432:function(n,e,s){"use strict";s.r(e);var o=s(2),r=Object(o.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"流程控制分支结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流程控制分支结构"}},[this._v("#")]),this._v(" 流程控制分支结构")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('\t1.分支流程控制if语句\n  ex.\n    if (score >= 90){\n      alert("A")\n    }else if (score >= 80 && score < 90){ //没必要写&& score < 90，因为90以上，已经在第一阶段执行了\n      alert("B")\n    }else if (score >= 70 && score < 80){\n      alert("C")\n    }else if (score >= 60 && score < 70){\n      alert("D")\n    }else {\n      alert("E")\n    }\n\t2.分支流程控制switch语句\n  ex. 拿表达式的值与case的值相匹配（全等关系）；如果没有break，则会继续往下执行，直到退出\n    var fruit = prompt("请输入水果名字：")\n    switch (fruit) {\n      case \'西瓜\':\n        console.log("35/斤")\n        break\n      case \'榴莲\':\n        console.log("60/斤")\n        break\n      default:\n        console.log("没有此水果")\n    }\n\n  if和switch的区别\n  1.\tswitch...case语句通常处理case为比较确定的值\n    if...else...语句更加灵活，用于范围判断\n  2.\tswitch语句条件判断后，直接跳到满足条件的case处，效率更高，而if有几种条件，就得判断多少次\n  3.\t当分支比较少时，if更有效\n\n  3.循环语句结构\n\t1.for循环语句：组成：终止条件+循环体\n\tfor(初始变量;条件表达式;操作表达式){\n\t\t//循环体\n\t}\n\t操作表达式：每次循环最后执行的代码，经常用于计数器变量（初始变量）更新:递增或递减\n  ex.\n    for (var i = 0;i<100;i++){\n      console.log("你好")\n    }\n  1.var i =0;\n  2.判断i < 100;\n  3.执行console.log("你好")\n  4.i++ i =1；\n  5.判断i < 100;\t\t\n  6.执行console.log("你好")\n  ...\n  7.i++ i =101；\n  8.判断i < 100;\n  9.终止\n\n  断点调试\n  1.sources\n  2.打开代码\n  3.单击数字，断点\n  4.浅蓝色背景表单前阶段\n  5.下一步右边按钮\t\n  watch：来观察变量\n  ex.\n    var num =prompt("求1-输入值之间累加:")\n    var sum = 0;\n    for (var i = 1;i <=num;i++){\n      sum = sum + i;\n      console.log(sum)\n    }\n\n    //求1-100之间所有数的平均值\n    var sum = 0;\n    var average = 0;\n    for (var i = 1;i <=100;i++){\n      sum = sum + i;\n    }\n    average = sum / 100;\n    console.log(average)\n\n    //求1-100之间所有偶数之和以及奇数之和\n    var even = 0;\n    var odd = 0;\n    for (var i = 1; i <= 100; i++){\n      if (i % 2 === 0){\n        even = even + i;\n      }else {\n        odd = odd + i;\n      }\n    }\n    console.log(even)\n    console.log(odd)\n\n  打印5行5列星星\n    //内层负责打印5个星形\n    //外层负责打印5行\n    var str = ""\n    for (var i = 1; i <= 5; i++){\n      for (var j = 1; j <= 5;j++){\n        str = str + \'*\'\n      }\n      //实现换行\n      str = str + \'反斜杠n\'\n    }\n    console.log(str)\n  倒三角，可以直接让j=i\n\n    //99乘法\n    var str = ""\n    for (var i = 1; i <= 9; i++){\n      for (var j = 1; j <= i;j++){\n        str += i +\'*\'+ j + \'=\' + i * j + \'\\t\'\n      }\n      //实现换行\n      str = str + \'\\n\'\n    }\n    console.log(str)\n\n    //while语句 比for更灵活，条件比较复杂时可用\n    var num = 1\n    while(num <= 100){\n      console.log("你好啊")\n      num++\n    }\n\n    //do...while语句;先执行一次循环体再判断；至少会执行一次\n    var num = 1\n    do {\n      console.log("你好啊")\n      i++\n    }while(i <= 100)\n\n    //continue 跳过当次循环，执行下一次循环\n    //计算1-100之间，除了能被7整除之外的整数和\n    var sum = 0\n    for (var i = 1; i <= 100; i++){\n      if (i % 7 ==0){\n        continue\n      }\n      sum += i\n    }\n    console.log(sum)\n    ```')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);