(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{442:function(n,t,e){"use strict";e.r(t);var s=e(2),r=Object(s.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h2",{attrs:{id:"浏览器内核"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[this._v("#")]),this._v(" 浏览器内核")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("了解一下\n\n浏览器内核是支持浏览器运行的最核心的程序\n\tchrome,safari的内核 webkit\n\tfirefox:Gecko\n\tIE:Trident\n\t360，搜狗等国内的浏览器：Trident + webkit //换皮\n内核由多个模块组成\n\tJS引擎模块：负责JS程序的编译与运行\n\thtml,css文档解析模块\n\tDOM/CSS模块\n\t布局和渲染模块\n\t...\n以下分线程\n\t定时器模块\n\t事件响应模块\n网络请求模块\n\n\n进程proceed\n\t程序的一次执行，占有一片独有的内存空间\n\t通过任务管理器查看\n\t一个程序可以有多个进程，（多进程应用/程序）\n线程thread\n\t可以有多线程\n\t\n\t一个程序必须运行在某个进程的某个线程上\n\t一个进程至少有一个运行的线程（主线程），进程启动后，主线程自动创建\n\t一个进程内的数据，多个线程直接共享\n\t多个进程直接的数据，不能直接共享\n\t线程池（thread pool）：保存多个线程对象的容器，实现线程对象的重复利用\n\n多进程：一个程序，多开\n多线程：一个进程内，多线程运行，\n\t优点：提高CPU利用率\n\t缺点：多线程开销\n\t      线程之间切换：\n单核也能有多线程，同时只能处理一个线程，一个执行会儿暂停，执行另外一个\n\n\t      死锁和状态同步问题\n单线程：优点：顺序执行\n\t缺点：效率低\n\n比如双核cpu，双线程，即同时间能做两件事情，不一定同时执行，如果是单线程运行，只能做一个事情\n另外一个核，就休息了\n\nJS是单线程，H5中的web workers可以多线程运行\n\n浏览器是多线程运行的\n浏览器有的是多进程，有的是单进程\t\n\n\n代码分类\n\t初始化代码：\n\t回调代码：回调函数内的代码\n\nJS引擎执行代码的基本流程\n\t*先执行初始化代码：含一些特殊的代码，启动计时器和绑定监听\t \n\t*设置定时器\n\t*绑定监听\n\t*发送ajax请求\n\t*后面某个时刻才会执行回调函数\n\n回调函数（异步执行），在初始化代码执行后才能执行的代码叫做异步执行代码\n\n即便H5多了web worker 也只能有一个线程对DOM进行更新删除等操作\n\nalert会暂停当前主线程的执行，同时也会暂停计时\n计时器也是在JS的主线程（单线程）执行\n浏览器管理模块，只是帮忙管理，排队，最终在JS主线程执行\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);