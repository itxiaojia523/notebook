(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{441:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("p",[t._v("值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。")]),t._v(" "),a("p",[t._v("引用数据类型（对象类型）：对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）。")]),t._v(" "),a("h2",{attrs:{id:"基本类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1.String\n2.Number\n3.Boolean\n4.Null 空，不存在\n5.Undefined 未定义，存在这个变量但是没值\n6.Symbol 忘记了\n")])])]),a("h2",{attrs:{id:"类型转化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转化"}},[t._v("#")]),t._v(" 类型转化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t转为字符串：\'\'\n\t转为数值：parseInt();parseFloat();- * /\n\t转为布尔值：Boolean()\n\n    var year = prompt("请输入您的出生年份:") \n    //prompt获得的是String，想当做Number用来计算，要将String转换为Number\n    var age = 2021 - year; //减法隐式转化\n    alert("您今年"+age+"岁") //字符串拼接  String+其他，其他会被隐式转换成String\n\n    var num1 = prompt("请输入第一个值：")\n    var num2 = prompt("请输入第二个值：")\n    var result = parseFloat(num1) + parseFloat(num2) //prompt的返回值类型是字符串\n    alert("计算的结果是"+ result)\n\n    var name = prompt("请输入姓名：")\n    var age = prompt("请输入年龄：")\n    alert("名字:"+ name+"\\n年龄："+age) //反斜杠n要放在引号中，实现换行\n')])])]),a("h2",{attrs:{id:"基本包装类型-string-number-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本包装类型-string-number-boolean"}},[t._v("#")]),t._v(" 基本包装类型：String Number Boolean")]),t._v(" "),a("p",[a("strong",[t._v("对象才有属性和方法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tvar str = 'andy'\n\tconsole.log(str.length) //4\n    //对象才有属性和方法,为什么str会有length属性呢\n    //隐藏机制\n    相当于\tvar temp = new String('andy') //包装\n\tstr = temp //赋值\n\ttemp = null //销毁临时变量\n")])])]),a("h2",{attrs:{id:"字符串操作方法-重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作方法-重点"}},[t._v("#")]),t._v(" 字符串操作方法（重点）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("注意：字符串所有的方法，都不会修改字符串本身，\n操作返回一个新的字符串（开辟一个新的内存空间，存放字符串）\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    // 拼接字符串，+号更常用\n\tconcat(str1,str2)\n    // 截取字符串\n\tsubstr(start,length)//从start开始，截取length个字符 重点！\n\tslice(start,end) // end取不到\n\tsubstring(start,end) //end取不到 基本同slice,但不接受负值\n\t// 替换字符\n\treplace('被替换','替换') //只替换第一个\n    // 把字符串转为字符串数组；\n\tsplit('分隔符') \n    ex.\n\tvar str3 = 'red&pink&blue'\n    str3.split('&') //[\"red\", \"pink\", \"blue\"]\n    //join（）把数组转为字符串\n\n\ttoUpperCase()//转为大写\n\ttoLowerCase()//转为小写\n\n\tindexOf('要找的字符',[起始位置])// 根据字符返回位置; []表可选，没有则返回-1\n\tcharAt(index) //根据位置返回字符\n\tcharCodeAt(index) //根据位置返回字符的ASCII码\n\tstr[index] //IE8+\n")])])]),a("hr"),t._v(" "),a("h1",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("h2",{attrs:{id:"算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[t._v("#")]),t._v(" 算术运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t%：取余 主要用来判断一个数是否能被整除 余数为0\n    ++:\n\t前置递增：先+1，再返回值\n\t后置递增：先返回原值，再+1;即 a =2; a++ =1;（用更多）\n")])])]),a("h2",{attrs:{id:"比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\tconsole.log(18 == '18') true 会转型，转型后相等也相等\n\tconsole.log(18 === '18') false 表全等 一般用这个\n")])])]),a("h2",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t&& || !\n\t*（重要）短路运算（逻辑中断）：当有多个表达式（值）时，左边的表达式可以确定结果时，就不再继续运算\n\t1.逻辑与 语法：表达式1 && 表达式2\n\t如果表达式1的值为true，则返回表达式2\n\t如果表达式1的值为false,即可确定结果，则返回表达式1\n")])])]),a("h2",{attrs:{id:"赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符"}},[t._v("#")]),t._v(" 赋值运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\n\t= += -= *= ...\n")])])]),a("p",[t._v("看符号左右几个变量")]),t._v(" "),a("h2",{attrs:{id:"一元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一元运算符"}},[t._v("#")]),t._v(" 一元运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" a++ a--\n")])])]),a("h2",{attrs:{id:"二元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二元运算符"}},[t._v("#")]),t._v(" 二元运算符")]),t._v(" "),a("div",{staticClass:"language-a + b extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])]),a("h2",{attrs:{id:"三元运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符"}},[t._v("#")]),t._v(" 三元运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('条件表达式？ 表达式1：表达式2\n\t\t如果条件表达式为真，返回1的值；假，返回2的值\nex.\n    var num = 10;\n    var result = 5>10? "yes":"no"\n    console.log(result) //no\n\n')])])])])}),[],!1,null,null,null);a.default=r.exports}}]);