(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{445:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"dayjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dayjs"}},[t._v("#")]),t._v(" Dayjs")]),t._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install dayjs --save\n")])])]),a("h2",{attrs:{id:"引入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入"}},[t._v("#")]),t._v(" 引入")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import dayjs from 'dayjs'\nvar dayjs = require('dayjs')\n\n使用day.js\ndayjs().format()\n")])])]),a("p",[t._v("Day.js 没有对原生 Date.prototype 做任何修改")]),t._v(" "),a("p",[t._v("Day.js给Date对象做了一层封装,使用支持的数据格式调用 dayjs() 即可取到这个封装的对象")]),t._v(" "),a("p",[t._v("Day.js对象是不可变的，所有的 API 操作都将返回一个全新的实例")]),t._v(" "),a("h2",{attrs:{id:"重要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要"}},[t._v("#")]),t._v(" 重要")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('概念\n  日期 + 时区 = 时间\n  date + timeZone = timeStamp/time\n\n  2023年9月22日22:02:45 UTC+9\n  2023年9月22日23:02:45 UTC+10\n  2023年9月22日13:02:45 UTC+0\n\n  这三个其实是同一时间！！！\n\n  dayjs("2323-09-22T10:24:00 +10:00")  +10:00 表示时区\n  得到\n  "2323-09-22T9:24:00 +9:00"  //生成的是localTimeZone的时刻！\n \n')])])]),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" api")]),t._v(" "),a("p",[t._v("支持链式调用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dayjs('2019-01-25').add(1, 'day').subtract(1, 'year').year(2009).toString()\nAdd 返回增加一定时间的复制的 Day.js 对象\nSubtract 返回减去一定时间的复制的 Day.js 对象\n\n单位\t     缩写\t 详情\nday\t        d\t星期几 (星期天0，星期六6)\nweek\t    w\tWeek of Year\nmonth\t    M\t月份 (一月 0， 十二月 11)\nquarter\t    Q\t季度 ( 依赖 QuarterOfYear 插件 )\nyear\t    y\tYear\nhour\t    h\tHour\nminute\t    m\tMinute\nsecond\t    s\tSecond\nmillisecond\tms\tMillisecond\n\n\n")])])]),a("h3",{attrs:{id:"dayjs-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dayjs-2"}},[t._v("#")]),t._v(" dayjs()")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var now = dayjs()   //返回一个包含当前日期和时间的 Day.js 对象 Local\n\nvar d = dayjs('2018-04-04T16:00:00.000Z') // 解析传入的 ISO 8601 格式的字符串并返回一个 Day.js 对象实例\n")])])]),a("h3",{attrs:{id:"d-clone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-clone"}},[t._v("#")]),t._v(" d.clone()")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("所有的Day.js对象都是不可变的\n\nvar a = dayjs()\nvar b = a.clone()\na 和 b 是两个独立的 Day.js 对象\n\n在 dayjs() 里传入一个 Day.js 对象也会返回一个复制的对象\nvar a = dayjs()\nvar b = dayjs(a)\n\n")])])]),a("h3",{attrs:{id:"d-isvalid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-isvalid"}},[t._v("#")]),t._v(" d.isValid()")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("检测当前 Day.js 对象是否是一个有效的时间，返回 boolean\n")])])]),a("h3",{attrs:{id:"format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[t._v("#")]),t._v(" Format")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dayjs().format()     // 默认返回的是 ISO8601 格式字符串 '2020-04-02T08:02:17-05:00'\ndayjs('2019-01-25').format('YYYY-MM-DDTHH:mm:ssZ[Z]')   // '2019-01-25T00:00:00-02:00Z'\ndayjs('2019-01-25').format('DD/MM/YYYY')                // '25/01/2019'\n\n占位符\t输出          \t详情\nYY\t   18\t            两位数的年份\nYYYY   2018\t            四位数的年份\nM\t   1-12\t            月份，从 1 开始\nMM\t   01-12\t        月份，两位数\nMMM\t   Jan-Dec\t        缩写的月份名称\nMMMM   January-December\t完整的月份名称\nD\t   1-31\t            月份里的一天\nDD\t   01-31\t        月份里的一天，两位数\nd\t   0-6\t            一周中的一天，星期天是 0\ndd\t   Su-Sa\t        最简写的星期几\nddd\t   Sun-Sat\t        简写的星期几\ndddd   Sunday-Saturday\t星期几\nH\t   0-23\t            小时\nHH\t   00-23\t        小时，两位数\nh\t   1-12\t            小时, 12 小时制\nhh\t   01-12\t        小时, 12 小时制, 两位数\nm\t   0-59\t            分钟\nmm\t   00-59\t        分钟，两位数\ns\t   0-59\t            秒\nss\t   00-59\t        秒 两位数\nSSS\t   000-999\t        毫秒 三位数\nZ\t   +05:00\t        UTC 的偏移量，±HH:mm\nZZ\t   +0500\t        UTC 的偏移量，±HHmm\nA\t   AM PM\t\na\t   am pm\t\n\n")])])]),a("h3",{attrs:{id:"timezone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timezone"}},[t._v("#")]),t._v(" TimeZone")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Day.js 默认是 不处理时区问题的，所以需要引入Timezone 插件\n\nconst utc = require('dayjs/plugin/utc')\nconst timezone = require('dayjs/plugin/timezone') // dependent on utc plugin\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\ndayjs.tz.setDefault(\"Asia/Shanghai\") // 设置时区为上海，东八区，UTC + 8\n\n这里有一个小问题，即timezone插件只影响dayjs.tz()的行为，不影响dayjs()的行为\n所以引入timezone插件后要改为调用dayjs.tz()才能获取到指定时区的dayjs对象\n\nconst dayjs = require('dayjs')\nconst utc = require('dayjs/plugin/utc')\nconst timezone = require('dayjs/plugin/timezone') // dependent on utc plugin\ndayjs.extend(utc)\ndayjs.extend(timezone)\n\ndayjs.tz.setDefault(\"Asia/Shanghai\") \n\ndayjs() // 依旧是服务器/本地时区\ndayjs.tz() //这样才是指定的时区\n")])])]),a("h3",{attrs:{id:"处理时区问题的终极解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理时区问题的终极解决方案"}},[t._v("#")]),t._v(" 处理时区问题的终极解决方案")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("如果我就是想直接调用 dayjs() 来获取指定时区该怎么办？\n只要设置TZ这个环境变量即可。\nprocess.env.TZ = 'Asia/Shanghai'\n")])])]),a("h3",{attrs:{id:"utc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#utc"}},[t._v("#")]),t._v(" utc")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('    const d1 = dayjs.utc("2023-9-15 10:30:30").utcOffset(9)  // utc时间+ 9\n    console.log("UTC:"+d1.format( "YYYY-MM-DD HH:mm:ss")) //UTC:2023-09-15 19:30:30\n\n\n    const d = dayjs("2023-9-15 10:30:30").utcOffset(9)   //默认local +9 无效\n    console.log("local:"+d.format( "YYYY-MM-DD HH:mm:ss")) //local:2023-09-15 10:30:30\n\n    const d2 = dayjs("2023-9-15 10:30:30").utcOffset(8)   //默认local(9)  设置的时区8 效果就是-1 得到 \n    //local:2023-09-15 09:30:30\n\n    //获取utc时间timestamp\n    const d1TimeStamp = dayjs.utc("2023-9-15 10:30:30").unix()*1000  \n    注意*1000\n\n\n    \n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('  useEffect(()=>{\n    //获取utc时间timestamp\n    const d1TimeStamp = dayjs.utc("2023-9-15 10:30:30").unix()*1000\n\n    const d1 = dayjs.utc(d1TimeStamp) \n    console.log("UTC:"+d1.format( "YYYY-MM-DD HH:mm:ss"))  //UTC:2023-09-15 10:30:30\n\n    //知道时区9\n    const d2 = d1.utcOffset(9)\n    console.log("UTC+TZ:"+d2.format( "YYYY-MM-DD HH:mm:ss"))  // UTC+TZ:2023-09-15 19:30:30\n\n    //目标时间\n    const targetDate = dayjs("2023-9-15 15:30:30")\n    console.log("targetDate:"+targetDate.format( "YYYY-MM-DD HH:mm:ss"))  // targetDate:2023-09-15 15:30:30\n\n    // 需要将这个目标时间 转为utc时间 2023-09-15 15:30:30 - 9 h\n\n\n    const targetDateUTC = targetDate.utcOffset(0)\n    console.log("targetDateUTC:"+targetDateUTC.format( "YYYY-MM-DD HH:mm:ss"))  // targetDateUTC:2023-09-15 06:30:30\n\n    // 转为timeStamp给到父组件\n    const targetDateTimeStamp =targetDateUTC.unix()*1000\n\n    //验证 targetDateTimeStamp\n    const test = dayjs.utc(targetDateTimeStamp)\n    console.log("test:"+test.format( "YYYY-MM-DD HH:mm:ss")) //  2023-09-15 06:30:30\n\n    //成功 传送给父组件\n\n  },[])\n\n')])])])])}),[],!1,null,null,null);a.default=e.exports}}]);