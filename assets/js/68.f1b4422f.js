(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{476:function(t,n,a){"use strict";a.r(n);var e=a(2),s=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"创建项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建项目"}},[t._v("#")]),t._v(" 创建项目")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1. 全局安装 create-react-app\n npm install -g create-react-app\n // 如果很久之前安装过，建议卸载重新安装 npm uninstall -g create-react-app\n\n2. 创建项目\n npx create-react-app my-app --template typescript\n\n3. \n cd my-app //进入项目目录\n npm run start\n\n")])])]),n("h2",{attrs:{id:"修改react版本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修改react版本"}},[t._v("#")]),t._v(" 修改react版本")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('1. 修改package.json\n"react": "^17.0.2",\n"react-dom": "^17.0.2",\n@testing-library/react": "^12.1.5",\n2. 删除 package-lock.json\n3. 删除 node_module\n4. npm install\n')])])]),n("h2",{attrs:{id:"本地存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#本地存储"}},[t._v("#")]),t._v(" 本地存储")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("store.js\nnpm install --save store\n")])])]),n("h2",{attrs:{id:"项目结构相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目结构相关"}},[t._v("#")]),t._v(" 项目结构相关")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1. 组件首字母大写\n普通组件放在components文件夹\n路由组件放在routers或pages文件夹\n\nHello文件夹下有Hello.tsx\nimport Hello from xxx/components/Hello/Hello    //.tsx可以省略\n\nHello文件夹下有index.tsx 和index.css\nimport Hello from xxx/components/Hello  //可以少写一层\n")])])]),n("h2",{attrs:{id:"样式模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#样式模块化"}},[t._v("#")]),t._v(" 样式模块化")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("如果hello组件 和 welcom组件的样式名字一样\n然后两个组件都引到app组件中\n那么两者样式冲突，后者覆盖前者\n\n解决1：less/sass\n\n解决2：样式模块化\n.hello{\n    .title{\n        background-color:orange;\n    }\n}\n原名是index.css 改为index.module.css \nimport hello from ./index.module.css\n\nclassName={hello.title}\n\n\n\n")])])]),n("h2",{attrs:{id:"样式丢失问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#样式丢失问题"}},[t._v("#")]),t._v(" 样式丢失问题")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('原因找不到资源，会返回index.html\n但是f12里会发现请求成功200，但是样式没生效\n\n<Route path="/atguigu/about" component={About}/>\n\n原因：多层路径+刷新\nlocalhost:3000/css/bootstarp.css   ///atguigu不见了\nlocalhost:3000/atguigu/css/bootstarp.css \n\n方案：\n1. 引入路径的. 去掉 \n2. PUBLIC_URL \n<link rel="stylesheet" href="%PUBLIC_URL%/css/bootstrap.css">\n3. HashRouter 用得少\n')])])]),n("h2",{attrs:{id:"跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('ajax默认遵守同源策略，违背同源策略就是跨域\n\n##什么是同源\n\t协议，域名，端口都相同\n##同源策略\n\t简单点来说：浏览器不允许A网站的js与非同源的网站C之间进行资源交互\n\tex. \n\t\t○ 无法读取非同源网页的 cookie localstorage indexdDB\n\t\t○ 无法接触非同源网页的DOM\n\t\t○ 无法发送Ajax请求( 跨域请求可以正常发起，浏览器也能接收到响应的数据，但是页面无法获取到，被浏览器拦截了)\n\t\t\n\n正向代理：代理客户端\n隐藏真实的请求客户端，通过代理服务器发送请求\n\n反向代理：代理服务器\n隐藏真实的服务器，通过代理相应请求\n\nJSONP：非官方的跨域解决方案\n\t借助页面的script标签进行跨呀\n\t页面的一些标签本身具有跨域特性script link\n\t只支持get请求\n\t\nCORS：cross-origin resource sharing\n仅在开发时时候，上线时关闭\n图片上传跨域上线时也需要cors\n\n\nreact中处理跨域\n\n后端可以解决跨域\n\n前端解决跨域\n跨域问题：同源策略，能发请求，但是响应被ajax引擎拦截了\n代理也是在3000接口，但是因为代理没有ajax，所以没问题\n\n本质是：host3000请求host3000代理；host3000代理向后端发请求，再转发给host5000\n## \n\n一般是请求地址应该是5000的，但是配置了前端代理，所以用3000就可以\nhttp://localhost:3000 可以略\n\n第一种\n①\n所有发给3000的请求都转发给了5000，只能配置一个代理\npackage.json中追加\n"proxy":"http://localhost:5000"\n\n注意：写axios时还是用3000，在3000有的资源不会去5000，没有的才会用5000\n\n第二种\nnpm install http-proxy-middleware 默认下载好了\n在src下新建setupProxy.js\n\nconst { createProxyMiddleware } = require("http-proxy-middleware");\nmodule.exports = function(app) {\n  app.use(\n    createProxyMiddleware ("/api1", { //①如果请求地址有api1 就转发请求\n      target: "http://localhost:5000", //②转发给5000\n      changeOrigin: true,//③控制服务器收到的请求头的Host的值\n      pathRewrite:{\'^/api1\':\'\'} //④把请求中的/api1删掉，换成\'\'\n        //http://localhost:3000/api1/students  \n    })，\n    createProxyMiddleware ("/api2", { //①如果请求地址有api1 就转发请求\n      target: "http://localhost:6000", //②转发给5000\n      changeOrigin: true,//③控制服务器收到的请求头的Host的值\n      pathRewrite:{\'^/api2\':\'\'} //④把请求中的/api1删掉，换成\'\'\n        //http://localhost:3000/api1/students  \n    })\n  );\n};\n\n使用时：\n//http://localhost:3000/api1/students  \n//http://localhost:3000/api2/cars\n\n')])])]),n("h2",{attrs:{id:"event事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event事件"}},[t._v("#")]),t._v(" event事件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('原生：\n三种写法\n<button id="btn1">按钮1</button>\n<button id="btn2">按钮2</button>\n<button onclick="demo()">按钮3</button>\n\n//1.\nconst btn1 = document.getElementById("btn1")\nbtn1.addEventListener("click",()=>{\n\talert("btn1 got clicked")\n})\n//2.\nconst btn2 = document.getElementById("btn1")\nbtn2.onclick = ()=>{alert("btn2 got clicked")}\n//3.\nfunction demo(){\nalert("btn3 got clicked")\n}\n\nreact绑定事件\n采用类似原生的第三种\n注意：\n\tonClick 驼峰写法\n\t去掉();否则渲染的时候会执行一次\n\nreturn <h1 onClick={demo}>今天的天气很{isHot?"炎热":"凉爽"}</h1>\n\nonXXX 注意大小写\n1. React使用的是自定义（合成）事件，而不是原生DOM\n2. React中的事件是通过事件委托方式处理的（委托给组件最外层元素）\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('高阶函数：满足以下任一条件\n①：若A接受的参数是一个函数，那么可以称作高阶函数\n②：若A的函数的返回值仍然是一个函数，那么可以称作告诫函数\n常见的有：Promise      setTimeout      arr.map()\n\n函数的柯里化：通过函数继续返回函数的方式，实现多次接受参数，最后统一处理的编码方式\n\n注意：老项目修改\n即便看到id = "root" 也要看下其他地方是否用到这个id\nClass -> className\nStyle -> style = {{}}\nstyle="display:none"\nstyle={{display:\'none\'}}\n\n拆分组件：\n按布局，按功能\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);